#ifndef GAME_H
#define GAME_H

/**
 * @file game.h
 * @brief Файл з описом функцій взаємодії з користувачем, класів
 * "колода" та "гра".
 * Клас "колода": конструктор, деструктор, створення та 
 * тасування колоди, взаємодія з гравцем та додавання 
 * додаткової карти.
 * Клас "гра": конструктор, деструктор та початок гри.
 *
 * @author Khelemendyk D.
 * @date 15-july-2022
 * @version 0.1
 */

#include "player.h"
#include <algorithm>
#include <ctime>
#include <cctype>

/**
 * Перерахування "дія". Відображає бажання користувача щодо 
 * подальших дій(почати гру, ознайомитися з правилами чи 
 * вийти з програми).
 */
enum Action { START, RULES, END };

/**
 * Вступ.
 *
 * Функція вітає гравця та запитує його подальші дії.
 * @return перерахування "дія" (START, RULES або END);
 */
Action introduction();

// Друк правил гри.
void showRulesOfGame();

/**
 * Отримання імен гравців.
 *
 * Функція запитує кількість гравців та їх імена.
 * @param names вектор, в якому зберігаються імена всіх гравців.
 */
void getNamesOfPlayers(vector<string> &names);

/**
 * Чи бажає гравець продовжити грати.
 *
 * Функція запитує у користувача чи зіграти знову.
 * @return істину якщо гравець хоче відновити гру.
 */
bool isPlayAgain();

/**
 * Клас "колода". Відображає гральну колоду карт.
 */
class Deck : public Hand {
    public:
	Deck();
	~Deck() override;

	/**
	 * Створення колоди.
	 *
	 * Функція створює гральну колоду з 52 карт. 
	 */
	void populateDeck();

	/**
	 * Тасування колоди.
	 *
	 * Функція тасує колоду карт за допомогою функції 
	 * random_shaffle.
	 */
	void shuffleDeck();

	/**
	 * Взаємодія з гравцем.
	 *
	 * Якщо наявні карти в руці гравця функція додає карту.
	 */
	void dealWithPlayer(Hand &hand);

	/**
	 * Додавання додаткової карти.
	 *
	 * Якщо гравець не перебрав та бажає взяти карту, то 
	 * функція взаємодіє з гравцем функцією {@link dealWithPlayer}.
	 * Далі виводить гравця на екран. Також якщо гравець перебрав - 
	 * повідомляє про це.
	 * @param genericPlayer - посилання на загального гравця.
	 */
	void additionalCards(GenericPlayer &genericPlayer);
};
/**
 * Клас "гра". Проводить гру.
 */
class Game {
    public:
	Game(const vector<string> &names);
	~Game();
	/**
	 * Запуск гри.
	 *
	 * Спочатку функція роздає кожному по дві гральні карти та 
	 * ховає першу карту дилера. Далі відкриває руки всіх гравців.
	 * Тепер роздає додаткові карти гравцям(якщо гравець 
	 * перебрав - друкує це). Потім відкриває першу карту дилера 
	 * та роздає додаткові карти йому. Нарешті, підводить підсумки 
	 * по грі. В кінці функція звільнює руки всіх гравців.
	 */
	void startGame();

    private:
	Deck deck;
	Dealer dealer;
	vector<Player> players;
};
#endif